// Generated automatically. Don't edit this file.
import * as Joi from 'joi';

export default {
	name: 'node-bandwidth',
	version: '3.0.0-alpha.4',
	objects: {
		Account: {
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/account',
		
		
		
			},
			getTransactions: {
				method: 'GET',
				path: '/v1/users/{userId}/account/transactions',
				query: Joi.object().keys({maxItems: Joi.number().integer(), toDate: Joi.date(), fromDate: Joi.date(), type: Joi.string().valid(["charge","payment","credit","auto-recharge"]), page: Joi.number().integer(), size: Joi.number().integer().max(1000), number: Joi.string()}),
		
		
			},

		},
		Applications: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/applications',
				query: Joi.object().keys({page: Joi.number().integer(), size: Joi.number().integer().max(1000)}),
		
		
			},
			create: {
				method: 'POST',
				path: '/v1/users/{userId}/applications',
				contentType: 'application/json',
		
				body: Joi.object().keys({name: Joi.string().required(), incomingCallUrl: Joi.string(), incomingCallUrlCallbackTimeout: Joi.number().integer(), incomingCallFallbackUrl: Joi.string(), incomingMessageUrl: Joi.string(), incomingMessageUrlCallbackTimeout: Joi.number().integer(), incomingMessageFallbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["post","get"]), autoAnswer: Joi.boolean()}),
				bodyKeys: new Set(['name', 'incomingCallUrl', 'incomingCallUrlCallbackTimeout', 'incomingCallFallbackUrl', 'incomingMessageUrl', 'incomingMessageUrlCallbackTimeout', 'incomingMessageFallbackUrl', 'callbackHttpMethod', 'autoAnswer'])
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/applications/{id}',
		
		
		
			},
			update: {
				method: 'POST',
				path: '/v1/users/{userId}/applications/{id}',
				contentType: 'application/json',
		
				body: Joi.object().keys({name: Joi.string(), incomingCallUrl: Joi.string(), incomingCallUrlCallbackTimeout: Joi.number().integer(), incomingCallFallbackUrl: Joi.string(), incomingMessageUrl: Joi.string(), incomingMessageUrlCallbackTimeout: Joi.number().integer(), incomingMessageFallbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["post","get"]), autoAnswer: Joi.boolean()}),
				bodyKeys: new Set(['name', 'incomingCallUrl', 'incomingCallUrlCallbackTimeout', 'incomingCallFallbackUrl', 'incomingMessageUrl', 'incomingMessageUrlCallbackTimeout', 'incomingMessageFallbackUrl', 'callbackHttpMethod', 'autoAnswer'])
			},
			delete: {
				method: 'DELETE',
				path: '/v1/users/{userId}/applications/{id}',
		
		
		
			},

		},
		Media: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/media',
		
		
		
			},
			download: {
				method: 'GET',
				path: '/v1/users/{userId}/media/{mediaName}',
				binaryResponse: true,
		
		
		
			},
			upload: {
				method: 'PUT',
				path: '/v1/users/{userId}/media/{mediaName}',
		
		
		
			},
			delete: {
				method: 'DELETE',
				path: '/v1/users/{userId}/media/{mediaName}',
		
		
		
			},

		},
		AvailableNumbers: {
			searchLocalNumbers: {
				method: 'GET',
				path: '/v1/availableNumbers/local',
				query: Joi.object().keys({city: Joi.string(), state: Joi.string(), zip: Joi.number(), areaCode: Joi.string(), inLocalCallingArea: Joi.boolean(), quantity: Joi.number().max(5000), pattern: Joi.string()}),
		
		
			},
			searchAndOrderLocalNumbers: {
				method: 'POST',
				path: '/v1/availableNumbers/local',
				query: Joi.object().keys({city: Joi.string(), state: Joi.string(), zip: Joi.number(), areaCode: Joi.string(), inLocalCallingArea: Joi.boolean(), localNumber: Joi.string(), quantity: Joi.number().max(5000), pattern: Joi.string()}),
		
		
			},
			searchTollFreeNumbers: {
				method: 'GET',
				path: '/v1/availableNumbers/tollFree',
				query: Joi.object().keys({quantity: Joi.number().max(5000), pattern: Joi.string()}),
		
		
			},
			searchAndOrderTollFreeNumbers: {
				method: 'POST',
				path: '/v1/availableNumbers/tollFree',
				query: Joi.object().keys({quantity: Joi.number().max(5000)}),
		
		
			},

		},
		Bridges: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/bridges/{id}/calls',
		
		
		
			},
			create: {
				method: 'POST',
				path: '/v1/users/{userId}/bridges',
				contentType: 'application/json',
		
				body: Joi.object().keys({callIds: Joi.array().items(Joi.string()), bridgeAudio: Joi.string()}),
				bodyKeys: new Set(['callIds', 'bridgeAudio'])
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/bridges/{id}',
		
		
		
			},
			update: {
				method: 'POST',
				path: '/v1/users/{userId}/bridges/{id}',
				contentType: 'application/json',
		
				body: Joi.object().keys({callIds: Joi.array().items(Joi.string()), bridgeAudio: Joi.string()}),
				bodyKeys: new Set(['callIds', 'bridgeAudio'])
			},
			playAudio: {
				method: 'POST',
				path: '/v1/users/{userId}/bridges/{id}/audio',
				contentType: 'application/json',
		
				body: Joi.object().keys({fileUrl: Joi.string(), sentence: Joi.string(), gender: Joi.string().valid(["female","male"]), locale: Joi.string(), voice: Joi.string(), tag: Joi.string()}),
				bodyKeys: new Set(['fileUrl', 'sentence', 'gender', 'locale', 'voice', 'tag'])
			},

		},
		Calls: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/calls',
				query: Joi.object().keys({bridgeId: Joi.string(), conferenceId: Joi.string(), from: Joi.string(), to: Joi.string(), sortOrder: Joi.string().valid(["asc","desc"]), page: Joi.number().integer(), size: Joi.number().integer().max(1000)}),
		
		
			},
			create: {
				method: 'POST',
				path: '/v1/users/{userId}/calls',
				contentType: 'application/json',
		
				body: Joi.object().keys({from: Joi.string().required(), to: Joi.string().required(), callTimeout: Joi.number(), callbackTimeout: Joi.number(), callbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["GET","POST"]), fallbackUrl: Joi.string(), bridgeId: Joi.string(), conferenceId: Joi.string(), recordingEnabled: Joi.boolean(), recordingFileFormat: Joi.string().valid(["wav","mp3"]), recordingMaxDuration: Joi.number(), transcriptionEnabled: Joi.boolean(), tag: Joi.string(), sipHeaders: Joi.object().keys({})}),
				bodyKeys: new Set(['from', 'to', 'callTimeout', 'callbackTimeout', 'callbackUrl', 'callbackHttpMethod', 'fallbackUrl', 'bridgeId', 'conferenceId', 'recordingEnabled', 'recordingFileFormat', 'recordingMaxDuration', 'transcriptionEnabled', 'tag', 'sipHeaders'])
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/calls/{id}',
		
		
		
			},
			update: {
				method: 'POST',
				path: '/v1/users/{userId}/calls/{id}',
				contentType: 'application/json',
		
				body: Joi.object().keys({state: Joi.string().valid(["rejected","active","completed","transferring"]), callTimeout: Joi.number(), callbackTimeout: Joi.number(), callbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["GET","POST"]), fallbackUrl: Joi.string(), recordingEnabled: Joi.boolean(), recordingFileFormat: Joi.string().valid(["wav","mp3"]), recordingMaxDuration: Joi.number(), transcriptionEnabled: Joi.boolean(), transferTo: Joi.string(), transferCallerId: Joi.string(), whisperAudio: Joi.any()}),
				bodyKeys: new Set(['state', 'callTimeout', 'callbackTimeout', 'callbackUrl', 'callbackHttpMethod', 'fallbackUrl', 'recordingEnabled', 'recordingFileFormat', 'recordingMaxDuration', 'transcriptionEnabled', 'transferTo', 'transferCallerId', 'whisperAudio'])
			},
			playAudio: {
				method: 'POST',
				path: '/v1/users/{userId}/calls/{id}/audio',
				contentType: 'application/json',
		
				body: Joi.object().keys({fileUrl: Joi.string(), sentence: Joi.string(), gender: Joi.string().valid(["female","male"]), locale: Joi.string(), voice: Joi.string(), tag: Joi.string()}),
				bodyKeys: new Set(['fileUrl', 'sentence', 'gender', 'locale', 'voice', 'tag'])
			},
			sendDtmf: {
				method: 'POST',
				path: '/v1/users/{userId}/calls/{id}/dtmf',
				contentType: 'application/json',
		
				body: Joi.object().keys({dtmfOut: Joi.string()}),
				bodyKeys: new Set(['dtmfOut'])
			},
			getEvents: {
				method: 'GET',
				path: '/v1/users/{userId}/calls/{id}/events',
		
		
		
			},
			getEvent: {
				method: 'GET',
				path: '/v1/users/{userId}/calls/{id}/events/{eventId}',
		
		
		
			},
			getRecordings: {
				method: 'GET',
				path: '/v1/users/{userId}/calls/{id}/recordings',
		
		
		
			},
			getTranscriptions: {
				method: 'GET',
				path: '/v1/users/{userId}/calls/{id}/transcriptions',
		
		
		
			},
			createGather: {
				method: 'POST',
				path: '/v1/users/{userId}/calls/{id}/gather',
				contentType: 'application/json',
		
				body: Joi.object().keys({maxDigits: Joi.number().max(30), interDigitTimeout: Joi.number().max(30), terminatingDigits: Joi.string(), tag: Joi.string(), prompt: Joi.object().keys({sentence: Joi.string(), gender: Joi.string().valid(["female","male"]), locale: Joi.string(), loopEnabled: Joi.boolean(), bargeable: Joi.boolean(), fileUrl: Joi.string()})}),
				bodyKeys: new Set(['maxDigits', 'interDigitTimeout', 'terminatingDigits', 'tag', 'prompt'])
			},
			getGather: {
				method: 'GET',
				path: '/v1/users/{userId}/calls/{id}/gather/{gatherId}',
		
		
		
			},
			updateGather: {
				method: 'POST',
				path: '/v1/users/{userId}/calls/{id}/gather/{gatherId}',
				contentType: 'application/json',
		
				body: Joi.object().keys({state: Joi.string().valid(["completed"])}),
				bodyKeys: new Set(['state'])
			},

		},
		Conferences: {
			create: {
				method: 'POST',
				path: '/v1/users/{userId}/conferences',
				contentType: 'application/json',
		
				body: Joi.object().keys({from: Joi.string(), callbackTimeout: Joi.number(), callbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["GET","POST"]), fallbackUrl: Joi.string(), profile: Joi.string().valid(["interpret_digits","passthru_digits"]), tag: Joi.string()}),
				bodyKeys: new Set(['from', 'callbackTimeout', 'callbackUrl', 'callbackHttpMethod', 'fallbackUrl', 'profile', 'tag'])
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/conferences/{id}',
		
		
		
			},
			update: {
				method: 'POST',
				path: '/v1/users/{userId}/conferences/{id}',
				contentType: 'application/json',
		
				body: Joi.object().keys({state: Joi.string(), hold: Joi.boolean(), mute: Joi.boolean(), callbackTimeout: Joi.number(), callbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["GET","POST"]), fallbackUrl: Joi.string(), tag: Joi.string()}),
				bodyKeys: new Set(['state', 'hold', 'mute', 'callbackTimeout', 'callbackUrl', 'callbackHttpMethod', 'fallbackUrl', 'tag'])
			},
			playAudio: {
				method: 'POST',
				path: '/v1/users/{userId}/conferences/{id}/audio',
				contentType: 'application/json',
		
				body: Joi.object().keys({fileUrl: Joi.string(), sentence: Joi.string(), gender: Joi.string().valid(["female","male"]), locale: Joi.string(), voice: Joi.string(), tag: Joi.string()}),
				bodyKeys: new Set(['fileUrl', 'sentence', 'gender', 'locale', 'voice', 'tag'])
			},
			getMembers: {
				method: 'GET',
				path: '/v1/users/{userId}/conferences/{id}/members',
		
		
		
			},
			addMember: {
				method: 'POST',
				path: '/v1/users/{userId}/conferences/{id}/members',
				contentType: 'application/json',
		
				body: Joi.object().keys({callId: Joi.string().required(), joinTone: Joi.boolean(), leavingTone: Joi.boolean(), mute: Joi.boolean(), hold: Joi.boolean()}),
				bodyKeys: new Set(['callId', 'joinTone', 'leavingTone', 'mute', 'hold'])
			},
			getMember: {
				method: 'GET',
				path: '/v1/users/{userId}/conferences/{id}/members/{memberId}',
		
		
		
			},
			updateMember: {
				method: 'POST',
				path: '/v1/users/{userId}/conferences/{id}/members/{memberId}',
				contentType: 'application/json',
		
				body: Joi.object().keys({state: Joi.string(), joinTone: Joi.boolean(), leavingTone: Joi.boolean(), mute: Joi.boolean(), hold: Joi.boolean()}),
				bodyKeys: new Set(['state', 'joinTone', 'leavingTone', 'mute', 'hold'])
			},
			playAudioToMember: {
				method: 'POST',
				path: '/v1/users/{userId}/conferences/{id}/members/{memberId}/audio',
				contentType: 'application/json',
		
				body: Joi.object().keys({fileUrl: Joi.string(), sentence: Joi.string(), gender: Joi.string().valid(["female","male"]), locale: Joi.string(), voice: Joi.string(), tag: Joi.string()}),
				bodyKeys: new Set(['fileUrl', 'sentence', 'gender', 'locale', 'voice', 'tag'])
			},

		},
		Domains: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/domains',
				query: Joi.object().keys({page: Joi.number().integer(), size: Joi.number().integer().max(100)}),
		
		
			},
			create: {
				method: 'POST',
				path: '/v1/users/{userId}/domains',
				contentType: 'application/json',
		
				body: Joi.object().keys({name: Joi.string().required(), description: Joi.string()}),
				bodyKeys: new Set(['name', 'description'])
			},
			delete: {
				method: 'DELETE',
				path: '/v1/users/{userId}/domains/{id}',
		
		
		
			},
			getEndpoints: {
				method: 'GET',
				path: '/v1/users/{userId}/domains/{id}/endpoints',
				query: Joi.object().keys({page: Joi.number().integer(), size: Joi.number().integer().max(1000)}),
		
		
			},
			createEndpoint: {
				method: 'POST',
				path: '/v1/users/{userId}/domains/{id}/endpoints',
				contentType: 'application/json',
		
				body: Joi.object().keys({name: Joi.string().required(), description: Joi.string(), applicationId: Joi.string(), enabled: Joi.boolean(), credentials: Joi.object().keys({password: Joi.string()}).required()}),
				bodyKeys: new Set(['name', 'description', 'applicationId', 'enabled', 'credentials'])
			},
			getEndpoint: {
				method: 'GET',
				path: '/v1/users/{userId}/domains/{id}/endpoints/{endpointId}',
		
		
		
			},
			updateEndpoint: {
				method: 'POST',
				path: '/v1/users/{userId}/domains/{id}/endpoints/{endpointId}',
				contentType: 'application/json',
		
				body: Joi.object().keys({description: Joi.string(), applicationId: Joi.string(), enabled: Joi.boolean(), credentials: Joi.object().keys({password: Joi.string()})}),
				bodyKeys: new Set(['description', 'applicationId', 'enabled', 'credentials'])
			},
			deleteEndpoint: {
				method: 'DELETE',
				path: '/v1/users/{userId}/domains/{id}/endpoints/{endpointId}',
		
		
		
			},

		},
		Errors: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/errors',
				query: Joi.object().keys({page: Joi.number().integer(), size: Joi.number().integer().max(1000)}),
		
		
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/errors/{id}',
		
		
		
			},

		},
		NumberInfo: {
			get: {
				method: 'GET',
				path: '/v1/phoneNumbers/numberInfo/{number}',
		
		
		
			},

		},
		Messages: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/messages',
				query: Joi.object().keys({from: Joi.string(), to: Joi.string(), fromDateTime: Joi.date(), toDateTime: Joi.date(), direction: Joi.string().valid(["in","out"]), state: Joi.string().valid(["received","queued","sending","sent","error"]), deliveryState: Joi.string().valid(["waiting","delivered","not-delivered"]), sortOrder: Joi.string().valid(["asc","desc"]), page: Joi.number().integer(), size: Joi.number().integer().max(100)}),
		
		
			},
			send: {
				method: 'POST',
				path: '/v1/users/{userId}/messages',
				contentType: 'application/json',
		
				body: Joi.alternatives().try(Joi.object().keys({from: Joi.string().required(), to: Joi.string().required(), text: Joi.string(), media: Joi.array().items(Joi.string()), receiptRequested: Joi.string().valid(["all","none","error"]), callbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["post","get"]), callbackTimeout: Joi.number(), fallbackUrl: Joi.string(), tag: Joi.string()}), Joi.array().items(Joi.object().keys({from: Joi.string().required(), to: Joi.string().required(), text: Joi.string(), media: Joi.array().items(Joi.string()), receiptRequested: Joi.string().valid(["all","none","error"]), callbackUrl: Joi.string(), callbackHttpMethod: Joi.string().valid(["post","get"]), callbackTimeout: Joi.number(), fallbackUrl: Joi.string(), tag: Joi.string()}))),
				bodyKeys: new Set([])
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/messages/{id}',
		
		
		
			},

		},
		MessagesV2: {
			send: {
				method: 'POST',
				path: '/v2/users/{userId}/messages',
				contentType: 'application/json',
		
				body: Joi.object().keys({from: Joi.string().required(), to: Joi.alternatives().try(Joi.string(), Joi.array().items(Joi.string())), text: Joi.string().required(), applicationId: Joi.string().required(), media: Joi.array().items(Joi.string()), tag: Joi.string()}),
				bodyKeys: new Set(['from', 'to', 'text', 'applicationId', 'media', 'tag'])
			},

		},
		PhoneNumbers: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/phoneNumbers',
				query: Joi.object().keys({applicationId: Joi.string(), state: Joi.string(), name: Joi.string(), city: Joi.string(), numberState: Joi.string(), page: Joi.number().integer(), size: Joi.number().integer().max(100)}),
		
		
			},
			create: {
				method: 'POST',
				path: '/v1/users/{userId}/phoneNumbers',
				contentType: 'application/json',
		
				body: Joi.object().keys({name: Joi.string(), number: Joi.string().required(), applicationId: Joi.string(), fallbackNumber: Joi.string()}),
				bodyKeys: new Set(['name', 'number', 'applicationId', 'fallbackNumber'])
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/phoneNumbers/{id}',
		
		
		
			},
			update: {
				method: 'POST',
				path: '/v1/users/{userId}/phoneNumbers/{id}',
				contentType: 'application/json',
		
				body: Joi.object().keys({name: Joi.string(), applicationId: Joi.string(), fallbackNumber: Joi.string()}),
				bodyKeys: new Set(['name', 'applicationId', 'fallbackNumber'])
			},
			remove: {
				method: 'DELETE',
				path: '/v1/users/{userId}/phoneNumbers/{id}',
		
		
		
			},

		},
		Recordings: {
			list: {
				method: 'GET',
				path: '/v1/users/{userId}/recordings',
				query: Joi.object().keys({page: Joi.number().integer(), size: Joi.number().integer().max(100)}),
		
		
			},
			get: {
				method: 'GET',
				path: '/v1/users/{userId}/recordings/{id}',
		
		
		
			},
			getTranscriptions: {
				method: 'GET',
				path: '/v1/users/{userId}/recordings/{id}/transcriptions',
		
		
		
			},
			createTranscription: {
				method: 'POST',
				path: '/v1/users/{userId}/recordings/{id}/transcriptions',
		
		
		
			},
			getTranscription: {
				method: 'GET',
				path: '/v1/users/{userId}/recordings/{id}/transcriptions/{transcriptionId}',
		
		
		
			},

		}
	}
};